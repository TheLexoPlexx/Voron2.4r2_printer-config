#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    
    ## 350mm build
    G0 X175 Y175 Z30 F3600

    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro CENTER]
gcode:
    G0 X175 Y175 Z130 F40000
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
	SET_DISPLAY_TEXT MSG="Setup..."
	# SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1

	SET_DISPLAY_TEXT MSG="Initial Heatup"
	{% set BED = params.BED|default(65)|float %}
	{% set EXTRUDER = params.EXTRUDER|default(210)|float %}

	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150        ; set extruder temp to 160 for QGL w/o oozing
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}    ; set bed temp

    ;SET_FAN_SPEED FAN=nevermore SPEED=0.75

	SET_DISPLAY_TEXT MSG="Start gcode"
	G21 # set to mm
	M220 S100 # print speed 100%
	M221 S100 # flow rate 100%
	M107 # disable fans
	G90 # absolute

	SET_DISPLAY_TEXT MSG="Conditional G28"
	_CG28

	SET_DISPLAY_TEXT MSG="Bed-Heatup"
	G0 X175 Y175 Z120 F10000
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED}

	SET_DISPLAY_TEXT MSG="Waiting one minute"
    G4 P60000
    
	SET_DISPLAY_TEXT MSG="Quad Gantry Level"
	QUAD_GANTRY_LEVEL

	SET_DISPLAY_TEXT MSG="G28 Z"
    G28 Z

	SET_DISPLAY_TEXT MSG="Bed Mesh Calibrate"
	BED_MESH_CLEAR
    BED_MESH_CALIBRATE
	
	G0 X175 Y175 Z15 F40000


	# Dieser Teil muss entfernt werden, sobald der VOC-ESP funktioniert.
	SET_DISPLAY_TEXT MSG="Nevermore Fan: ABS/ASA?"
	{% set FILAMENT = params.FILAMENT|default(0) %}
    {% if FILAMENT == 'ABS' %}
      SET_FAN_SPEED FAN=nevermore SPEED=0.40
    {% elif FILAMENT == 'ASA' %}
      SET_FAN_SPEED FAN=nevermore SPEED=0.40
    {% else %}
      SET_FAN_SPEED FAN=nevermore SPEED=0
    {% endif %}

	SET_DISPLAY_TEXT MSG="Final Heatup"
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER}

	SET_DISPLAY_TEXT MSG="Syncing Steppers..."
    SYNC_EXTRUDER_MOTION EXTRUDER=secondary_extruder MOTION_QUEUE=extruder

    SFS_ENABLE
	SET_DISPLAY_TEXT MSG="Printing..."
	# M83
	# G1 E40 F600


    # G32                            ; home all axes
    # G90                            ; absolute positioning
    # G1 Z20 F3000                   ; move nozzle away from bed


######################################################################
# Filament Change
######################################################################

# Source: https://github.com/Klipper3d/klipper/blob/master/config/sample-macros.cfg

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SFS_ENABLE
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SFS_ENABLE
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro PRINT_END]
gcode:

    SFS_DISABLE
	SET_DISPLAY_TEXT MSG="Done."
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-15.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

	{% set FILAMENT = params.FILAMENT|default(0) %}
    {% if FILAMENT == 'ABS' %}
      SET_FAN_SPEED FAN=nevermore SPEED=0.25
    {% elif FILAMENT == 'ASA' %}
      SET_FAN_SPEED FAN=nevermore SPEED=0.25
    {% endif %}
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro LOAD_FILAMENT]
gcode:
  SET_DISPLAY_TEXT MSG="Loading Filament, waiting for heatup..."
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={175}

  SET_DISPLAY_TEXT MSG="Loading Filament..."
  M83
  {% for i in range(15) %}
    G1 E50 F3000
  {% endfor %}

  SET_DISPLAY_TEXT MSG="Filament loaded."

  TURN_OFF_HEATERS

[gcode_macro UNLOAD_FILAMENT]
gcode:
  SET_DISPLAY_TEXT MSG="Unloading Filament, waiting for heatup..."
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={175}

  SET_DISPLAY_TEXT MSG="Unloading Filament..."
  M83
  {% for i in range(15) %}
    G1 E-50 F3000
  {% endfor %}

  SET_DISPLAY_TEXT MSG="Filament unloaded."
  
  TURN_OFF_HEATERS



# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro _CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
			G28
	{% endif %}

[gcode_macro QGL]
gcode:
  QUAD_GANTRY_LEVEL